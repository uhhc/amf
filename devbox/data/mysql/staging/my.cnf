[client]
port = 3306
#socket = /var/run/mysqld/mysqld.sock
default-character-set=utf8mb4

[mysql]
# 这个配置段设置启动MySQL服务的条件；在这种情况下，no-auto-rehash确保这个服务启动得比较快。
no-auto-rehash
default-character-set=utf8mb4

[mysqld]
default-time_zone = '+8:00'                  # 设置时区为东八区
symbolic-links=0 # Disabling symbolic-links is recommended to prevent assorted security risks
#user = mysql
port = 3306
bind-address = 0.0.0.0
#socket = /var/run/mysqld/mysqld.sock
#basedir = /usr
datadir = /data/mysql/data                          # 默认在: /var/lib/mysql
open_files_limit = 65535
character-set-server=utf8mb4

log_error = /var/log/mysql/error.log                # 路径不能修改

general_log = ON                                    # 一般查询日志，默认关闭。开启用 ON
general_log_file = /var/log/mysql/query.log

#### 慢查询日志
log-queries-not-using-indexes
long_query_time = 2

# !!! 5.6及以上版本：
slow_query_log = ON
slow_query_log_file = /var/log/mysql/slow-queries.log
# !!! 5.6以下版本：
#log_slow_queries = /var/log/mysql/slow.log

back_log = 600
# 在MYSQL暂时停止响应新请求之前，短时间内的多少个请求可以被存在堆栈中。如果系统在短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的TCP/IP连接的监听队列的大小。默认值80。

sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
log-bin=mysql-master-bin                     # 打开二进制功能,MASTER主服务器必须打开此项
server-id=1                                  #server的唯一标识
#auto_increment_offset=1                     # 自增id起始值
#auto_increment_increment=2                  # 每次自增数字
max_binlog_size=1024M                        # binlog单文件最大值
#expire_logs_days = 10                       # 二进制日志自动删除的天数。默认值为0,表示没有自动删除

max_connections = 151
# MySQL允许最大的进程连接数，如果经常出现Too Many Connections的错误提示，则需要增大此值。默认151

max_connect_errors = 6000
# 设置每个主机的连接请求异常中断的最大次数，当超过该次数，MYSQL服务器将禁止host的连接请求，直到mysql服务器重启或通过flush hosts命令清空此host的相关信息。默认100

external-locking = FALSE
# 使用–skip-external-locking MySQL选项以避免外部锁定。该选项默认开启

max_allowed_packet = 32M
# 设置在网络传输中一次消息传输量的最大值。系统默认值 为4MB，最大值是1GB，必须设置1024的倍数。

#sort_buffer_size = 2M
# Sort_Buffer_Size 是一个connection级参数，在每个connection（session）第一次需要使用这个buffer的时候，一次性分配设置的内存。
# Sort_Buffer_Size 并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。例如：500个连接将会消耗 500*sort_buffer_size(8M)=4G内存
# Sort_Buffer_Size 超过2KB的时候，就会使用mmap() 而不是 malloc() 来进行内存分配，导致效率降低。 系统默认2M，使用默认值即可

#join_buffer_size = 2M
# 用于表间关联缓存的大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。系统默认2M，使用默认值即可

thread_cache_size = 32
# 默认 0，不启用。
# 服务器线程缓存这个值表示可以重新利用保存在缓存中线程的数量,当断开连接时如果缓存中还有空间,那么客户端的线程将被放到缓存中,如果线程重新被请求，那么请求将从缓存中读取;
# 如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，增加这个值可以改善系统性能。
# 通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用。
# 设置规则按经验建议如下：1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大。
# 该参数详细调优规则请参考: https://serverfault.com/questions/408845/what-value-of-thread-cache-size-should-i-use

#thread_concurrency = 4
# !!! thread_concurrency was removed in 5.7.2. It only had an effect on older Solaris systems.
# 系统默认为10，使用10先观察
# 设置thread_concurrency的值的正确与否, 对mysql的性能影响很大, 在多个cpu(或多核)的情况下，错误设置了thread_concurrency的值,
# 会导致mysql不能充分利用多cpu(或多核), 出现同一时刻只能一个cpu(或核)在工作的情况。
# thread_concurrency应设为CPU核数的2倍。比如有一个双核的CPU, 那么thread_concurrency的应该为4; 2个双核的cpu, thread_concurrency的值应为8

query_cache_size = 64M
# 在MyISAM引擎优化中，这个参数也是一个重要的优化参数。但也暴露出来一些问题。机器的内存越来越大，习惯性把参数分配的值越来越大。这个参数加大后也引发了一系列问题。
# 我们首先分析一下 query_cache_size的工作原理：一个SELECT查询在DB中工作后，DB会把该语句缓存下来，当同样的一个SQL再次来到DB里调用时，
# DB在该表没发生变化的情况下把结果从缓存中返回给Client。这里有一个关建点，就是DB在利用Query_cache工作时，要求该语句涉及的表在这段时间内没有发生变更。
# 那如果该表在发生变更时，Query_cache里的数据又怎么处理呢？
# 首先要把Query_cache和该表相关的语句全部置为失效，然后在写入更新。那么如果Query_cache非常大，该表的查询结构又比较多，查询语句失效也慢，一个更新或是Insert就会很慢，
# 这样看到的就是Update或是Insert怎么这么慢了。所以在数据库写入量或是更新量也比较大的系统，该参数不适合分配过大。而且在高并发，写入量大的系统，建议把该功能禁掉。

query_cache_limit = 4M
# 指定单个查询能够使用的缓冲区大小，缺省为1M

query_cache_min_res_unit = 2k
# 默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费
# 查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%
# 如果查询缓存碎片率超过20%，可以用FLUSH QUERY CACHE整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。
# 查询缓存利用率 = (query_cache_size – Qcache_free_memory) / query_cache_size * 100%
# 查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小;
# 查询缓存利用率在80%以上而且Qcache_lowmem_prunes > 50的话说明query_cache_size可能有点小，要不就是碎片太多。
# 查询缓存命中率 = (Qcache_hits – Qcache_inserts) / Qcache_hits * 100%

#default-storage-engine = MyISAM
#default_table_type = InnoDB

#thread_stack = 192K
# 设置MYSQL每个线程的堆栈大小，默认值足够大，可满足普通操作。可设置范围为128K至4GB，默认为256KB，使用默认观察

#transaction_isolation = REPEATABLE-READ
# 设定事务隔离级别，默认为 REPEATABLE-READ。可用的级别如下:
#### READ-UNCOMMITTED-读未提交
#### READ-COMMITTE-读已提交
#### REPEATABLE-READ -可重复读
#### SERIALIZABLE -串行
# 参考: https://stackoverflow.com/questions/36219508/read-committed-vs-repeatable-reads-in-mysql
# https://mydbops.wordpress.com/2018/06/22/back-to-basics-isolation-levels-in-mysql/

tmp_table_size = 32M
# tmp_table_size 的默认大小是 32M。如果一张临时表超出该大小，MySQL产生一个 The table tbl_name is full 形式的错误，
# 如果你做很多高级 GROUP BY 查询，增加 tmp_table_size 值。如果超过该值，则会将临时表写入磁盘。

max_heap_table_size = 256M
expire_logs_days = 7
key_buffer_size = 128M
# 批定用于索引的缓冲区大小，增加它可以得到更好的索引处理性能，对于内存在4GB左右的服务器来说，该参数可设置为256MB或384MB。

read_buffer_size = 1M
# 默认128K
# MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。
# 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。
# 和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。

read_rnd_buffer_size = 16M
# MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。
# 进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。
# 但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。

bulk_insert_buffer_size = 64M
# 批量插入数据缓存大小，可以有效提高插入效率，默认为8M

myisam_sort_buffer_size = 32M
# MyISAM表发生变化时重新排序所需的缓冲 默认8M

myisam_max_sort_file_size = 1G
# MySQL重建索引时所允许的最大临时文件的大小 (当 REPAIR, ALTER TABLE 或者 LOAD DATA INFILE).
# 如果文件大小比此值更大,索引会通过键值缓冲创建(更慢)

#myisam_max_extra_sort_file_size = 10G
# 注：5.6无此值设置

#myisam_repair_threads = 1
# 默认为1
# 如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们.
# 这对于拥有多个CPU以及大量内存情况的用户,是一个很好的选择.

#myisam_recover
# 自动检查和修复没有适当关闭的 MyISAM 表

skip-name-resolve
lower_case_table_names = 1

#innodb_additional_mem_pool_size = 16M
# 这个参数用来设置 InnoDB 存储的数据目录信息和其它内部数据结构的内存池大小，类似于Oracle的library cache。这不是一个强制参数，可以被突破。

innodb_buffer_pool_size = 1024M
# 这对Innodb表来说非常重要。Innodb相比MyISAM表对缓冲更为敏感。MyISAM可以在默认的 key_buffer_size 设置下运行的可以，
# 然而Innodb在默认的 innodb_buffer_pool_size 设置下却跟蜗牛似的。由于Innodb把数据和索引都缓存起来，无需留给操作系统太多的内存，
# 因此如果只需要用Innodb的话则可以设置它高达 70-80% 的可用内存。一些应用于 key_buffer 的规则有 — 如果你的数据量不大，并且不会暴增，
# 那么无需把 innodb_buffer_pool_size 设置的太大了

innodb_data_file_path = ibdata1:1024M:autoextend
# 默认12M。设置过大可能导致报错，需观察。存放表空间文件等重要数据。

#innodb_file_io_threads = 4
# 不明确则使用默认值。文件IO的线程数，一般为 4，但是在 Windows 下，可以设置得较大。

innodb_thread_concurrency = 2
# 服务器有几个CPU就设置为几，建议用默认设置，一般为8.

innodb_flush_log_at_trx_commit = 2
# 如果将此参数设置为1，将在每次提交事务后将日志写入磁盘。为提供性能，可以设置为0或2，但要承担在发生故障时丢失数据的风险。
# 设置为0表示事务日志写入日志文件，而日志文件每秒刷新到磁盘一次。设置为2表示事务日志将在提交时写入日志，但日志文件每次刷新到磁盘一次。

#innodb_log_buffer_size = 8M
# 默认为8M。
# 此参数确定写日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据.MySQL开发人员建议设置为1－8M之间

#innodb_log_file_size = 128M
# 默认48M
# 此参数确定数据日志文件的大小，以M为单位，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间

#innodb_log_files_in_group = 3
# 默认为 2。
# 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3

#innodb_max_dirty_pages_pct = 90
# 默认75
# 推荐阅读 http://www.taobaodba.com/html/221_innodb_max_dirty_pages_pct_checkpoint.html
# Buffer_Pool 中 Dirty_Page 所占的数量，直接影响 InnoDB 的关闭时间。
# 参数 innodb_max_dirty_pages_pct 可以直接控制 Dirty_Page 在 Buffer_Pool 中所占的比率，而且幸运的是 innodb_max_dirty_pages_pct 是可以动态改变的。
# 所以，在关闭 InnoDB 之前先将 innodb_max_dirty_pages_pct 调小，强制数据块 Flush 一段时间，则能够大大缩短 MySQL 关闭的时间。

# innodb_lock_wait_timeout = 120
# 默认为50秒
# InnoDB 有其内置的死锁检测机制，能导致未完成的事务回滚。但是，如果结合 InnoDB 使用 MyISAM 的 lock tables 语句或第三方事务引擎,则 InnoDB 无法识别死锁。
# 为消除这种可能性，可以将 innodb_lock_wait_timeout 设置为一个整数值，指示 MySQL 在允许其他事务修改那些最终受事务回滚的数据之前要等待多长时间(秒数)

# innodb_file_per_table = ON
# MySQL 5.6.6 以后默认为 ON
# 独享表空间。可参考：
# https://dba.stackexchange.com/questions/16208/why-using-innodb-file-per-table
# https://www.percona.com/blog/2015/02/24/mysqls-innodb_file_per_table-slowing/

[mysqldump]
quick
# max_allowed_packet = 32M

[mysqld.safe]
log-error = /var/log/mysql/error.log        # 路径不能修改
pid-file = /var/run/mysqld/mysqld.pid
default-character-set = utf8mb4
sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES

[mysql.server]
default-character-set=utf8mb4
